#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    char data;
    struct Node *next;
} *top = NULL;

/* 1. Push (LL) */
void pushLL(char x) {
    struct Node *t = (struct Node*)malloc(sizeof(struct Node));
    if(t == NULL)
        printf("Stack is Full\n");
    else {
        t->data = x;
        t->next = top;
        top = t;
    }
}

/* 2. Pop (LL) */
char popLL() {
    struct Node *t;
    char x = -1;
    if(top == NULL)
        printf("Stack is Empty\n");
    else {
        t = top;
        top = top->next;
        x = t->data;
        free(t);
    }
    return x;
}

/* 3. Display (LL) */
void DisplayLL() {
    struct Node *p = top;
    while(p != NULL) {
        printf("%c ", p->data);
        p = p->next;
    }
    printf("\n");
}

/* 4. isBalanced (Parenthesis Matching) */
int isBalanced(char *exp) {
    int i;
    for(i=0; exp[i]!='\0'; i++) {
        if(exp[i] == '(')
            pushLL(exp[i]);
        else if(exp[i] == ')') {
            if(top == NULL) return 0;
            popLL();
        }
    }
    if(top == NULL) return 1;
    return 0;
}

/* 5. Infix to Postfix Conversion */
int pre(char x) {
    if(x=='+' || x=='-') return 1;
    else if(x=='*' || x=='/') return 2;
    return 0;
}
int isOperand(char x) {
    if(x=='+'||x=='-'||x=='*'||x=='/') return 0;
    return 1;
}
char* InToPost(char *infix) {
    int i=0, j=0;
    int len = strlen(infix);
    char *postfix = (char*)malloc((len+2)*sizeof(char));
    pushLL('#');
    while(infix[i] != '\0') {
        if(isOperand(infix[i]))
            postfix[j++] = infix[i++];
        else {
            if(pre(infix[i]) > pre(top->data))
                pushLL(infix[i++]);
            else
                postfix[j++] = popLL();
        }
    }
    while(top != NULL && top->data != '#')
        postfix[j++] = popLL();
    postfix[j] = '\0';
    return postfix;
}



int main() {
   

    /*--------- Linked List Stack ---------*/
    pushLL('a');
    pushLL('b');
    pushLL('c');
    DisplayLL();
    printf("Pop(LL): %c\n", popLL());

    /*--------- Balanced Parenthesis ---------*/
    char *exp = "((a+b)*(c-d))";
    printf("Is Balanced: %d\n", isBalanced(exp));

    /*--------- Infix to Postfix ---------*/
    char *infix = "a+b*c";
    char *postfix = InToPost(infix);
    printf("Postfix: %s\n", postfix);

    return 0;
}
