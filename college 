class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    # Insert at beginning
    def insert_at_beginning(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    # Insert at end
    def insert_at_end(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            return
        temp = self.head
        while temp.next:
            temp = temp.next
        temp.next = new_node

    # Insert at given position
    def insert_at_position(self, data, pos):
        if pos == 1:
            self.insert_at_beginning(data)
            return
        new_node = Node(data)
        temp = self.head
        for _ in range(pos - 2):
            if temp is None:
                print("Invalid position!")
                return
            temp = temp.next
        if temp is None:
            print("Invalid position!")
            return
        new_node.next = temp.next
        temp.next = new_node

    # Delete at beginning
    def delete_at_beginning(self):
        if self.head is None:
            print("List is empty!")
            return
        self.head = self.head.next

    # Delete at end
    def delete_at_end(self):
        if self.head is None:
            print("List is empty!")
            return
        if self.head.next is None:
            self.head = None
            return
        temp = self.head
        while temp.next.next:
            temp = temp.next
        temp.next = None

    # Delete at given position
    def delete_at_position(self, pos):
        if self.head is None:
            print("List is empty!")
            return
        if pos == 1:
            self.delete_at_beginning()
            return
        temp = self.head
        for _ in range(pos - 2):
            if temp is None:
                print("Invalid position!")
                return
            temp = temp.next
        if temp is None or temp.next is None:
            print("Invalid position!")
            return
        temp.next = temp.next.next

    # Display list
    def display(self):
        if self.head is None:
            print("List is empty!")
            return
        temp = self.head
        while temp:
            print(temp.data, end=" -> ")
            temp = temp.next
        print("NULL")

# ---------------- MENU DRIVER ----------------
if __name__ == "__main__":
    ll = LinkedList()

    while True:
        print("\n------ MENU ------")
        print("1. Insert at Beginning")
        print("2. Insert at Position")
        print("3. Insert at End")
        print("4. Delete at Beginning")
        print("5. Delete at Position")
        print("6. Delete at End")
        print("7. Display")
        print("8. Exit")

        choice = int(input("Enter choice: "))

        if choice == 1:
            data = int(input("Enter data: "))
            ll.insert_at_beginning(data)
        elif choice == 2:
            data = int(input("Enter data: "))
            pos = int(input("Enter position: "))
            ll.insert_at_position(data, pos)
        elif choice == 3:
            data = int(input("Enter data: "))
            ll.insert_at_end(data)
        elif choice == 4:
            ll.delete_at_beginning()
        elif choice == 5:
            pos = int(input("Enter position: "))
            ll.delete_at_position(pos)
        elif choice == 6:
            ll.delete_at_end()
        elif choice == 7:
            ll.display()
        elif choice == 8:
            break
        else:
            print("Invalid choice!")